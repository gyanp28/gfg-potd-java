class Solution {
    Vector<Integer> generateNextPalindrome(int num[], int n) {
        Vector<Integer> out = new Vector<>();
        for (int i = 0; i < n; i++) {
            out.add(num[i]);
        }

        int i = 0, j = n - 1;

        while (i < j) {
            out.set(j, out.get(i));
            i++;
            j--;
        }

        boolean isBig = false;
        for (int it = n / 2; it < n; it++) {
            if (out.get(it) > num[it]) {
                isBig = true;
                break;
            }
            if (out.get(it) < num[it]) {
                break;
            }
        }

        if (isBig) {
            return out;
        }

        i = (n % 2 == 1) ? n / 2 : (n / 2 - 1);
        j = n / 2;

        while (i >= 0) {
            if (out.get(i) < 9) {
                out.set(i, out.get(i) + 1);
                out.set(j, out.get(i));
                return out;
            }
            out.set(i, 0);
            out.set(j, 0);
            i--;
            j++;
        }

        out.set(0, 1);
        out.add(1);

        return out;
    }
}